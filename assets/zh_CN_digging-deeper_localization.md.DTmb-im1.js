import{_ as a,f as n,o as e,an as i}from"./chunks/framework.CFMQV-X7.js";const r=JSON.parse('{"title":"本地化","description":"","frontmatter":{},"headers":[],"relativePath":"zh_CN/digging-deeper/localization.md","filePath":"zh_CN/digging-deeper/localization.md","lastUpdated":1761449547000}'),p={name:"zh_CN/digging-deeper/localization.md"};function l(t,s,o,c,h,d){return e(),n("div",null,s[0]||(s[0]=[i(`<h1 id="本地化" tabindex="-1">本地化 <a class="header-anchor" href="#本地化" aria-label="Permalink to “本地化”">​</a></h1><nav class="table-of-contents"><ul><li><a href="#简介">简介</a></li><li><a href="#配置语言环境">配置语言环境</a><ul><li><a href="#确定当前的语言环境">确定当前的语言环境</a></li><li><a href="#定义翻译字符串">定义翻译字符串</a></li><li><a href="#检索翻译字符串">检索翻译字符串</a></li></ul></li><li><a href="#embed-加载">Embed 加载</a></li></ul></nav><h2 id="简介" tabindex="-1">简介 <a class="header-anchor" href="#简介" aria-label="Permalink to “简介”">​</a></h2><p>Goravel 的本地化功能提供了一种方便的方法来检索各种语言的字符串，从而使你可以轻松地在应用程序中支持多种语言。 语言字符串存储在 <code>lang</code> 目录里的文件中，Goravel 支持两种方式组织语言文件：</p><p>每一种语言文件独立一个文件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>/lang</span></span>
<span class="line"><span>  en.json</span></span>
<span class="line"><span>  cn.json</span></span></code></pre></div><p>或者当语言过多时，可以对其进行分类：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>/lang</span></span>
<span class="line"><span>  /en</span></span>
<span class="line"><span>    user.json</span></span>
<span class="line"><span>  /cn</span></span>
<span class="line"><span>    user.json</span></span></code></pre></div><h2 id="配置语言环境" tabindex="-1">配置语言环境 <a class="header-anchor" href="#配置语言环境" aria-label="Permalink to “配置语言环境”">​</a></h2><p>应用程序的默认语言存储在 <code>config/app.go</code> 配置文件的 <code>locale</code> 配置选项中。 你可以随意修改此值以适合你的应用程序的需求。</p><p>你也可以使用 App Facade 提供的 <code>SetLocale</code> 方法，在运行时为单个 <code>HTTP</code> 请求修改默认语言：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>facades.Route().Get(&quot;/&quot;, func(ctx http.Context) http.Response {</span></span>
<span class="line"><span>    facades.App().SetLocale(ctx, &quot;en&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    return ctx.Response()</span></span>
<span class="line"><span>})</span></span></code></pre></div><p>你可以配置一个「备用语言」，当当前语言不包含给定的翻译字符串时，将使用该语言。 和默认语言一样，备用语言也是在 <code>config/app.go</code> 配置文件中配置。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>&quot;fallback_locale&quot;: &quot;en&quot;,</span></span></code></pre></div><h3 id="确定当前的语言环境" tabindex="-1">确定当前的语言环境 <a class="header-anchor" href="#确定当前的语言环境" aria-label="Permalink to “确定当前的语言环境”">​</a></h3><p>你可以使用 <code>CurrentLocale</code> 和 <code>IsLocale</code> 方法来确定当前的 <code>locale</code> 或检查 <code>locale</code> 是否是一个给定值。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>locale := facades.App().CurrentLocale(ctx)</span></span>
<span class="line"><span>if facades.App().IsLocale(ctx, &quot;en&quot;) {}</span></span></code></pre></div><h3 id="定义翻译字符串" tabindex="-1">定义翻译字符串 <a class="header-anchor" href="#定义翻译字符串" aria-label="Permalink to “定义翻译字符串”">​</a></h3><p>在语言文件中，可以定义一级或多级结构：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>// lang/en.json</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;name&quot;: &quot;It&#39;s your name&quot;,</span></span>
<span class="line"><span>  &quot;required&quot;: {</span></span>
<span class="line"><span>    &quot;user_id&quot;: &quot;UserID is required&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="检索翻译字符串" tabindex="-1">检索翻译字符串 <a class="header-anchor" href="#检索翻译字符串" aria-label="Permalink to “检索翻译字符串”">​</a></h3><p>你可以使用 <code>facades.Lang(ctx).Get()</code> 方法从语言文件中检索翻译字符串。 如果语言文件包含多个层级，可以使用 <code>.</code> 进行连接，如果语言文件在多层级的文件夹中，可以使用 <code>/</code> 进行连接。</p><p>例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>// lang/en.json</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;name&quot;: &quot;It&#39;s your name&quot;,</span></span>
<span class="line"><span>  &quot;required&quot;: {</span></span>
<span class="line"><span>    &quot;user_id&quot;: &quot;UserID is required&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>facades.Lang(ctx).Get(&quot;name&quot;)</span></span>
<span class="line"><span>facades.Lang(ctx).Get(&quot;required.user_id&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// lang/en/role/user.json</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;name&quot;: &quot;It&#39;s your name&quot;,</span></span>
<span class="line"><span>  &quot;required&quot;: {</span></span>
<span class="line"><span>    &quot;user_id&quot;: &quot;UserID is required&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>facades.Lang(ctx).Get(&quot;role/user.name&quot;)</span></span>
<span class="line"><span>facades.Lang(ctx).Get(&quot;role/user.required.user_id&quot;)</span></span></code></pre></div><h4 id="替换翻译字符串中的参数" tabindex="-1">替换翻译字符串中的参数 <a class="header-anchor" href="#替换翻译字符串中的参数" aria-label="Permalink to “替换翻译字符串中的参数”">​</a></h4><p>可以在翻译字符串中定义占位符。 所有占位符的前缀都是 <code>:</code>。 例如，可以使用占位符名称定义欢迎消息：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;welcome&quot;: &quot;Welcome, :name&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>在要检索翻译字符串时替换占位符，可以将替换数组作为第二个参数传递给 <code>facades.Lang(ctx).Get()</code> 方法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>facades.Lang(ctx).Get(&quot;welcome&quot;, translation.Option{</span></span>
<span class="line"><span>  Replace: map[string]string{</span></span>
<span class="line"><span>    &quot;name&quot;: &quot;Goravel&quot;,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>})</span></span></code></pre></div><h4 id="复数化" tabindex="-1">复数化 <a class="header-anchor" href="#复数化" aria-label="Permalink to “复数化”">​</a></h4><p>因为不同的语言有着各种复杂的复数化规则，所以复数化是个复杂的问题。 不过 Goravel 可以根据你定义的复数化规则帮助你翻译字符串。 使用 <code>|</code> 字符，可以区分字符串的单数形式和复数形式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;apples&quot;: &quot;There is one apple|There are many apples&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>你甚至可以创建更复杂的复数化规则，为多个值范围指定转换字符串：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;apples&quot;: &quot;{0} There are none|[1,19] There are some|[20,*] There are many&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>定义具有复数选项的翻译字符串后，可以使用 <code>facades.Lang(ctx).Choice()</code> 方法检索给定「count」的行。 在本例中，由于计数大于 1 ，因此返回翻译字符串的复数形式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>facades.Lang(ctx).Choice(&quot;messages.apples&quot;, 10)</span></span></code></pre></div><p>也可以在复数化字符串中定义占位符属性。 通过将数组作为第三个参数传递给 <code>facades.Lang(ctx).Choice()</code> 方法，可以替换这些占位符：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>&quot;minutes_ago&quot;: &quot;{1} :value minute ago|[2,*] :value minutes ago&quot;,</span></span>
<span class="line"><span></span></span>
<span class="line"><span>facades.Lang(ctx).Choice(&quot;time.minutes_ago&quot;, 5, translation.Option{</span></span>
<span class="line"><span>  Replace: map[string]string{</span></span>
<span class="line"><span>    &quot;value&quot;: &quot;5&quot;,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>})</span></span></code></pre></div><h2 id="embed-加载" tabindex="-1">Embed 加载 <a class="header-anchor" href="#embed-加载" aria-label="Permalink to “Embed 加载”">​</a></h2><p>使用 embed 加载时，多语言文件将会被编译到二进制文件中，部署时不再需要多语言文件。 独立语言文件与 embed 加载可以同时使用，只需要在 <code>config/app.go</code> 中同时配置 <code>lang_path</code> 和 <code>lang_fs</code> 即可。 使用时将优先使用独立语言文件模式，当独立语言文件不存在时，才会使用 embed 加载。</p><p>在多语言文件同级目录下创建一个 <code>fs.go</code> 文件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>/lang</span></span>
<span class="line"><span>  en.json</span></span>
<span class="line"><span>  cn.json</span></span>
<span class="line"><span>  fs.go</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// lang/fs.go</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">embed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//go:embed *</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FS </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">embed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FS</span></span></code></pre></div><p>然后在 <code>config/app.go</code> 中配置：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// config/app.go</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lang</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lang_path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lang&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lang_fs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:   lang.Fs,</span></span></code></pre></div>`,45)]))}const k=a(p,[["render",l]]);export{r as __pageData,k as default};
