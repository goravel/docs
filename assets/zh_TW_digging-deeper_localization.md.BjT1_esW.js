import{_ as a,f as n,o as e,an as i}from"./chunks/framework.CFMQV-X7.js";const r=JSON.parse('{"title":"本地化","description":"","frontmatter":{},"headers":[],"relativePath":"zh_TW/digging-deeper/localization.md","filePath":"zh_TW/digging-deeper/localization.md","lastUpdated":1761724533000}'),p={name:"zh_TW/digging-deeper/localization.md"};function l(t,s,o,c,h,d){return e(),n("div",null,s[0]||(s[0]=[i(`<h1 id="本地化" tabindex="-1">本地化 <a class="header-anchor" href="#本地化" aria-label="Permalink to “本地化”">​</a></h1><nav class="table-of-contents"><ul><li><a href="#概述">概述</a></li><li><a href="#配置語言環境">配置語言環境</a><ul><li><a href="#確定當前的語言環境">確定當前的語言環境</a></li><li><a href="#定義翻譯字符串">定義翻譯字符串</a></li><li><a href="#檢索翻譯字符串">檢索翻譯字符串</a></li></ul></li><li><a href="#embed-加載">Embed 加載</a></li></ul></nav><h2 id="概述" tabindex="-1">概述 <a class="header-anchor" href="#概述" aria-label="Permalink to “概述”">​</a></h2><p>Goravel 的本地化功能提供了一種方便的方法來檢索各種語言的字符串，使你可以輕鬆地在應用程序中支持多種語言。 語言字符串存儲在 <code>lang</code> 目錄下的文件中，Goravel 支持兩種方式來組織語言文件：</p><p>每一種語言都有自己的文件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>/lang</span></span>
<span class="line"><span>  en.json</span></span>
<span class="line"><span>  cn.json</span></span></code></pre></div><p>或者，當翻譯過多時，可以將它們分類：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>/lang</span></span>
<span class="line"><span>  /en</span></span>
<span class="line"><span>    user.json</span></span>
<span class="line"><span>  /cn</span></span>
<span class="line"><span>    user.json</span></span></code></pre></div><h2 id="配置語言環境" tabindex="-1">配置語言環境 <a class="header-anchor" href="#配置語言環境" aria-label="Permalink to “配置語言環境”">​</a></h2><p>應用程序的默認語言存儲在 <code>config/app.go</code> 配置文件中的 <code>locale</code> 配置選項中。你可以根據需要修改此值以滿足應用程序的需求。 你可以根據需要修改此值以適應你的應用程序的要求。</p><p>你也可以使用 App Facade 提供的 <code>SetLocale</code> 方法，為單個 <code>HTTP</code> 請求在運行時修改默認語言：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>facades.Route().Get(&quot;/&quot;, func(ctx http.Context) http.Response {</span></span>
<span class="line"><span>    facades.App().SetLocale(ctx, &quot;en&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    return ctx.Response()</span></span>
<span class="line"><span>})</span></span></code></pre></div><p>你可以配置一個「備用語言」，當當前語言不包含給定的翻譯字符串時，將使用該語言。 和默認語言一樣，備用語言也在 <code>config/app.go</code> 配置文件中進行配置。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>&quot;fallback_locale&quot;: &quot;en&quot;,</span></span></code></pre></div><h3 id="確定當前的語言環境" tabindex="-1">確定當前的語言環境 <a class="header-anchor" href="#確定當前的語言環境" aria-label="Permalink to “確定當前的語言環境”">​</a></h3><p>你可以使用 <code>CurrentLocale</code> 和 <code>IsLocale</code> 方法來確定當前的 <code>locale</code> 或檢查 <code>locale</code> 是否是給定值。</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>locale := facades.App().CurrentLocale(ctx)</span></span>
<span class="line"><span>if facades.App().IsLocale(ctx, &quot;en&quot;) {}</span></span></code></pre></div><h3 id="定義翻譯字符串" tabindex="-1">定義翻譯字符串 <a class="header-anchor" href="#定義翻譯字符串" aria-label="Permalink to “定義翻譯字符串”">​</a></h3><p>在語言文件中，可以定義單級或多級結構：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>// lang/en.json</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;name&quot;: &quot;It&#39;s your name&quot;,</span></span>
<span class="line"><span>  &quot;required&quot;: {</span></span>
<span class="line"><span>    &quot;user_id&quot;: &quot;UserID is required&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="檢索翻譯字符串" tabindex="-1">檢索翻譯字符串 <a class="header-anchor" href="#檢索翻譯字符串" aria-label="Permalink to “檢索翻譯字符串”">​</a></h3><p>你可以使用 <code>facades.Lang(ctx).Get()</code> 方法從語言文件中檢索翻譯字符串。如果語言文件包含多個層級，可以使用 <code>.</code> 進行連接；如果語言文件位於多層目錄中，可以使用 <code>/</code> 進行連接。 如果語言文件包含多個層級，你可以使用 <code>.</code> 進行連接，並且如果語言文件在多個層級的文件夾中，可以使用 <code>/</code> 進行連接。</p><p>例如：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>// lang/en.json</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;name&quot;: &quot;It&#39;s your name&quot;,</span></span>
<span class="line"><span>  &quot;required&quot;: {</span></span>
<span class="line"><span>    &quot;user_id&quot;: &quot;UserID is required&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>facades.Lang(ctx).Get(&quot;name&quot;)</span></span>
<span class="line"><span>facades.Lang(ctx).Get(&quot;required.user_id&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// lang/en/role/user.json</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;name&quot;: &quot;It&#39;s your name&quot;,</span></span>
<span class="line"><span>  &quot;required&quot;: {</span></span>
<span class="line"><span>    &quot;user_id&quot;: &quot;UserID is required&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>facades.Lang(ctx).Get(&quot;role/user.name&quot;)</span></span>
<span class="line"><span>facades.Lang(ctx).Get(&quot;role/user.required.user_id&quot;)</span></span></code></pre></div><h4 id="替換翻譯字符串中的參數" tabindex="-1">替換翻譯字符串中的參數 <a class="header-anchor" href="#替換翻譯字符串中的參數" aria-label="Permalink to “替換翻譯字符串中的參數”">​</a></h4><p>你可以在翻譯字符串中定義佔位符。 所有佔位符都以 <code>:</code> 開頭。 例如，你可以使用佔位符來定義歡迎消息：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;welcome&quot;: &quot;Welcome, :name&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>在檢索翻譯字符串時替換佔位符，可以將替換映射作為第二個參數傳遞給 <code>facades.Lang(ctx).Get()</code> 方法：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>facades.Lang(ctx).Get(&quot;welcome&quot;, translation.Option{</span></span>
<span class="line"><span>  Replace: map[string]string{</span></span>
<span class="line"><span>    &quot;name&quot;: &quot;Goravel&quot;,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>})</span></span></code></pre></div><h4 id="複數化" tabindex="-1">複數化 <a class="header-anchor" href="#複數化" aria-label="Permalink to “複數化”">​</a></h4><p>複數化是一個複雜的問題，因為不同的語言有不同的複數化規則。 然而，Goravel 可以幫助你根據定義的複數化規則翻譯字符串。 通過使用 <code>|</code> 字符，你可以區分字符串的單數和複數形式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;apples&quot;: &quot;有一個蘋果|有很多蘋果&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>你甚至可以創建更複雜的複數化規則，為多個值範圍指定翻譯字符串：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;apples&quot;: &quot;{0} 沒有|[1,19] 有一些|[20,*] 有很多&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>在定義具有複數選項的翻譯字符串後，你可以使用 <code>facades.Lang(ctx).Choice()</code> 方法檢索給定「count」的行。 在這個例子中，由於計數大於 1，因此返回翻譯字符串的複數形式：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>facades.Lang(ctx).Choice(&quot;messages.apples&quot;, 10)</span></span></code></pre></div><p>你也可以在複數化字符串中定義佔位符屬性。 通過將數組作為第三個參數傳遞給 <code>facades.Lang(ctx).Choice()</code> 方法，你可以替換這些佔位符：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>&quot;minutes_ago&quot;: &quot;{1} :value 分鐘前|[2,*] :value 分鐘前&quot;,</span></span>
<span class="line"><span></span></span>
<span class="line"><span>facades.Lang(ctx).Choice(&quot;time.minutes_ago&quot;, 5, translation.Option{</span></span>
<span class="line"><span>  Replace: map[string]string{</span></span>
<span class="line"><span>    &quot;value&quot;: &quot;5&quot;,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>})</span></span></code></pre></div><h2 id="embed-加載" tabindex="-1">Embed 加載 <a class="header-anchor" href="#embed-加載" aria-label="Permalink to “Embed 加載”">​</a></h2><p>使用嵌入加載時，語言文件將被編譯到二進制文件中，不再需要部署。 獨立語言文件和嵌入加載可以同時使用，僅需在 <code>config/app.go</code> 文件中配置 <code>lang_path</code> 和 <code>lang_fs</code>。 在使用時，將優先使用獨立語言文件模式，當獨立語言文件不存在時，將使用嵌入加載。</p><p>在與語言文件同一目錄下，創建一個 <code>fs.go</code> 文件：</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>/lang</span></span>
<span class="line"><span>  en.json</span></span>
<span class="line"><span>  cn.json</span></span>
<span class="line"><span>  fs.go</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// lang/fs.go</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">embed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//go:embed *</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FS </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">embed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FS</span></span></code></pre></div><p>然後在 <code>config/app.go</code> 文件中配置：</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// config/app.go</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lang</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lang_path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lang&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lang_fs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:   lang.Fs,</span></span></code></pre></div>`,45)]))}const k=a(p,[["render",l]]);export{r as __pageData,k as default};
