import{_ as s,f as e,o as n,an as i}from"./chunks/framework.CFMQV-X7.js";const g=JSON.parse('{"title":"Localization","description":"","frontmatter":{},"headers":[],"relativePath":"digging-deeper/localization.md","filePath":"en/digging-deeper/localization.md","lastUpdated":1761449547000}'),t={name:"digging-deeper/localization.md"};function l(p,a,o,c,r,h){return n(),e("div",null,a[0]||(a[0]=[i(`<h1 id="localization" tabindex="-1">Localization <a class="header-anchor" href="#localization" aria-label="Permalink to “Localization”">​</a></h1><nav class="table-of-contents"><ul><li><a href="#introduction">Introduction</a></li><li><a href="#configuring-the-locale">Configuring the Locale</a><ul><li><a href="#determining-the-current-locale">Determining the Current Locale</a></li><li><a href="#defining-translation-strings">Defining Translation Strings</a></li><li><a href="#retrieving-translation-strings">Retrieving Translation Strings</a></li></ul></li><li><a href="#embed-loading">Embed Loading</a></li></ul></nav><h2 id="introduction" tabindex="-1">Introduction <a class="header-anchor" href="#introduction" aria-label="Permalink to “Introduction”">​</a></h2><p>Goravel&#39;s localization features provide a convenient way to retrieve strings in various languages, making it easy to support multiple languages in your application. Language strings are stored in files in the <code>lang</code> directory, and Goravel supports two ways to organize language files:</p><p>Each language has its own file:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>/lang</span></span>
<span class="line"><span>  en.json</span></span>
<span class="line"><span>  cn.json</span></span></code></pre></div><p>Or, when there are too many translations, they can be categorized:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>/lang</span></span>
<span class="line"><span>  /en</span></span>
<span class="line"><span>    user.json</span></span>
<span class="line"><span>  /cn</span></span>
<span class="line"><span>    user.json</span></span></code></pre></div><h2 id="configuring-the-locale" tabindex="-1">Configuring the Locale <a class="header-anchor" href="#configuring-the-locale" aria-label="Permalink to “Configuring the Locale”">​</a></h2><p>The default language of the application is stored in the <code>locale</code> configuration option in the <code>config/app.go</code> configuration file. You can modify this value as needed to suit your application&#39;s requirements.</p><p>You can also use the <code>SetLocale</code> method provided by the App Facade to modify the default language for a single <code>HTTP</code> request at runtime:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>facades.Route().Get(&quot;/&quot;, func(ctx http.Context) http.Response {</span></span>
<span class="line"><span>    facades.App().SetLocale(ctx, &quot;en&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>    return ctx.Response()</span></span>
<span class="line"><span>})</span></span></code></pre></div><p>You can configure a &quot;fallback locale&quot; that will be used when the current language does not contain the given translation string. Like the default language, the fallback language is also configured in the <code>config/app.go</code> configuration file.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>&quot;fallback_locale&quot;: &quot;en&quot;,</span></span></code></pre></div><h3 id="determining-the-current-locale" tabindex="-1">Determining the Current Locale <a class="header-anchor" href="#determining-the-current-locale" aria-label="Permalink to “Determining the Current Locale”">​</a></h3><p>You can use the <code>CurrentLocale</code> and <code>IsLocale</code> methods to determine the current <code>locale</code> or check if the <code>locale</code> is a given value.</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>locale := facades.App().CurrentLocale(ctx)</span></span>
<span class="line"><span>if facades.App().IsLocale(ctx, &quot;en&quot;) {}</span></span></code></pre></div><h3 id="defining-translation-strings" tabindex="-1">Defining Translation Strings <a class="header-anchor" href="#defining-translation-strings" aria-label="Permalink to “Defining Translation Strings”">​</a></h3><p>In language files, you can define single-level or multi-level structures:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>// lang/en.json</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;name&quot;: &quot;It&#39;s your name&quot;,</span></span>
<span class="line"><span>  &quot;required&quot;: {</span></span>
<span class="line"><span>    &quot;user_id&quot;: &quot;UserID is required&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span></code></pre></div><h3 id="retrieving-translation-strings" tabindex="-1">Retrieving Translation Strings <a class="header-anchor" href="#retrieving-translation-strings" aria-label="Permalink to “Retrieving Translation Strings”">​</a></h3><p>You can use the <code>facades.Lang(ctx).Get()</code> method to retrieve translation strings from language files. If the language file contains multiple levels, you can use <code>.</code> to connect them, and if the language file is in multiple levels of folders, you can use <code>/</code> to connect them.</p><p>For example:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>// lang/en.json</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;name&quot;: &quot;It&#39;s your name&quot;,</span></span>
<span class="line"><span>  &quot;required&quot;: {</span></span>
<span class="line"><span>    &quot;user_id&quot;: &quot;UserID is required&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>facades.Lang(ctx).Get(&quot;name&quot;)</span></span>
<span class="line"><span>facades.Lang(ctx).Get(&quot;required.user_id&quot;)</span></span>
<span class="line"><span></span></span>
<span class="line"><span>// lang/en/role/user.json</span></span>
<span class="line"><span>{</span></span>
<span class="line"><span>  &quot;name&quot;: &quot;It&#39;s your name&quot;,</span></span>
<span class="line"><span>  &quot;required&quot;: {</span></span>
<span class="line"><span>    &quot;user_id&quot;: &quot;UserID is required&quot;</span></span>
<span class="line"><span>  }</span></span>
<span class="line"><span>}</span></span>
<span class="line"><span></span></span>
<span class="line"><span>facades.Lang(ctx).Get(&quot;role/user.name&quot;)</span></span>
<span class="line"><span>facades.Lang(ctx).Get(&quot;role/user.required.user_id&quot;)</span></span></code></pre></div><h4 id="replacing-parameters-in-translation-strings" tabindex="-1">Replacing Parameters in Translation Strings <a class="header-anchor" href="#replacing-parameters-in-translation-strings" aria-label="Permalink to “Replacing Parameters in Translation Strings”">​</a></h4><p>You can define placeholders in translation strings. All placeholders have the prefix <code>:</code>. For example, you can use a placeholder to define a welcome message:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;welcome&quot;: &quot;Welcome, :name&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>To replace placeholders when retrieving a translation string, you can pass a translation option with the replacement map as the second parameter to the <code>facades.Lang(ctx).Get()</code> method:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>facades.Lang(ctx).Get(&quot;welcome&quot;, translation.Option{</span></span>
<span class="line"><span>  Replace: map[string]string{</span></span>
<span class="line"><span>    &quot;name&quot;: &quot;Goravel&quot;,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>})</span></span></code></pre></div><h4 id="pluralization" tabindex="-1">Pluralization <a class="header-anchor" href="#pluralization" aria-label="Permalink to “Pluralization”">​</a></h4><p>Pluralization is a complex problem because different languages have various pluralization rules. However, Goravel can help you translate strings based on the pluralization rules you define. By using the <code>|</code> character, you can differentiate between the singular and plural forms of a string:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;apples&quot;: &quot;There is one apple|There are many apples&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>You can even create more complex pluralization rules by specifying translation strings for multiple value ranges:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>{</span></span>
<span class="line"><span>  &quot;apples&quot;: &quot;{0} There are none|[1,19] There are some|[20,*] There are many&quot;</span></span>
<span class="line"><span>}</span></span></code></pre></div><p>After defining a translation string with pluralization options, you can use the <code>facades.Lang(ctx).Choice()</code> method to retrieve the line for a given <code>count</code>. In this example, because the count is greater than 1, the plural form of the translation string is returned:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>facades.Lang(ctx).Choice(&quot;messages.apples&quot;, 10)</span></span></code></pre></div><p>You can also define placeholder attributes in pluralization strings. By passing an array as the third parameter to the <code>facades.Lang(ctx).Choice()</code> method, you can replace these placeholders:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>&quot;minutes_ago&quot;: &quot;{1} :value minute ago|[2,*] :value minutes ago&quot;,</span></span>
<span class="line"><span></span></span>
<span class="line"><span>facades.Lang(ctx).Choice(&quot;time.minutes_ago&quot;, 5, translation.Option{</span></span>
<span class="line"><span>  Replace: map[string]string{</span></span>
<span class="line"><span>    &quot;value&quot;: &quot;5&quot;,</span></span>
<span class="line"><span>  },</span></span>
<span class="line"><span>})</span></span></code></pre></div><h2 id="embed-loading" tabindex="-1">Embed Loading <a class="header-anchor" href="#embed-loading" aria-label="Permalink to “Embed Loading”">​</a></h2><p>When using embed loading, the language files will be compiled into the binary file and no longer need to be deployed. The independent language files and embed loading can be used at the same time, just configure <code>lang_path</code> and <code>lang_fs</code> in the <code>config/app.go</code> file. When using, the independent language file mode will be used first, and when the independent language file does not exist, the embed loading will be used.</p><p>In the same directory as the language files, create a <code>fs.go</code> file:</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span>/lang</span></span>
<span class="line"><span>  en.json</span></span>
<span class="line"><span>  cn.json</span></span>
<span class="line"><span>  fs.go</span></span></code></pre></div><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// lang/fs.go</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">package</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> lang</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">embed</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">//go:embed *</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">var</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> FS </span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">embed</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">FS</span></span></code></pre></div><p>Then configure in the <code>config/app.go</code> file:</p><div class="language-go vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">go</span><pre class="shiki shiki-themes github-light github-dark vp-code" style="--shiki-light:#24292e;--shiki-dark:#e1e4e8;--shiki-light-bg:#fff;--shiki-dark-bg:#24292e;" tabindex="0"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">// config/app.go</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &quot;</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">lang</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lang_path&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lang&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">,</span></span>
<span class="line"><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;lang_fs&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:   lang.Fs,</span></span></code></pre></div>`,45)]))}const u=s(t,[["render",l]]);export{g as __pageData,u as default};
